// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.PowerBI.Api.V1
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Gateways.
    /// </summary>
    public static partial class GatewaysExtensions
    {
            /// <summary>
            /// Updates the credentials for the specified datasource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceId'>
            /// The datasource id
            /// </param>
            /// <param name='datasourceDelta'>
            /// The datasource changes
            /// </param>
            public static object PatchDatasource(this IGateways operations, string collectionName, string workspaceId, string gatewayId, string datasourceId, object datasourceDelta)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).PatchDatasourceAsync(collectionName, workspaceId, gatewayId, datasourceId, datasourceDelta), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the credentials for the specified datasource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceId'>
            /// The datasource id
            /// </param>
            /// <param name='datasourceDelta'>
            /// The datasource changes
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PatchDatasourceAsync(this IGateways operations, string collectionName, string workspaceId, string gatewayId, string datasourceId, object datasourceDelta, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchDatasourceWithHttpMessagesAsync(collectionName, workspaceId, gatewayId, datasourceId, datasourceDelta, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all datasources of specific gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            public static ODataResponseListGatewayDatasource GetDatasources(this IGateways operations, string collectionName, string gatewayId)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).GetDatasourcesAsync(collectionName, gatewayId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all datasources of specific gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetDatasourcesAsync(this IGateways operations, string collectionName, string gatewayId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesWithHttpMessagesAsync(collectionName, gatewayId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a datasource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceToGatewayRequest'>
            /// The datasource requested to create
            /// </param>
            public static GatewayDatasource CreateDatasource(this IGateways operations, string collectionName, string gatewayId, PublishDatasourceToGatewayRequest datasourceToGatewayRequest)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).CreateDatasourceAsync(collectionName, gatewayId, datasourceToGatewayRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a datasource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceToGatewayRequest'>
            /// The datasource requested to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayDatasource> CreateDatasourceAsync(this IGateways operations, string collectionName, string gatewayId, PublishDatasourceToGatewayRequest datasourceToGatewayRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDatasourceWithHttpMessagesAsync(collectionName, gatewayId, datasourceToGatewayRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a datasource by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceId'>
            /// The datasource id
            /// </param>
            public static GatewayDatasource GetDatasourceById(this IGateways operations, string collectionName, string gatewayId, string datasourceId)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).GetDatasourceByIdAsync(collectionName, gatewayId, datasourceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a datasource by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceId'>
            /// The datasource id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayDatasource> GetDatasourceByIdAsync(this IGateways operations, string collectionName, string gatewayId, string datasourceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourceByIdWithHttpMessagesAsync(collectionName, gatewayId, datasourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a datasource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceId'>
            /// The datasource id
            /// </param>
            public static object DeleteDatasource(this IGateways operations, string collectionName, string gatewayId, string datasourceId)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).DeleteDatasourceAsync(collectionName, gatewayId, datasourceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a datasource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceId'>
            /// The datasource id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDatasourceAsync(this IGateways operations, string collectionName, string gatewayId, string datasourceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasourceWithHttpMessagesAsync(collectionName, gatewayId, datasourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a datasource credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceId'>
            /// The datasource id
            /// </param>
            /// <param name='updateDatasourceRequest'>
            /// The update datasource request
            /// </param>
            public static object UpdateDatasource(this IGateways operations, string collectionName, string gatewayId, string datasourceId, UpdateDatasourceRequest updateDatasourceRequest)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).UpdateDatasourceAsync(collectionName, gatewayId, datasourceId, updateDatasourceRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a datasource credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='datasourceId'>
            /// The datasource id
            /// </param>
            /// <param name='updateDatasourceRequest'>
            /// The update datasource request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDatasourceAsync(this IGateways operations, string collectionName, string gatewayId, string datasourceId, UpdateDatasourceRequest updateDatasourceRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDatasourceWithHttpMessagesAsync(collectionName, gatewayId, datasourceId, updateDatasourceRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateways for the workspace collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            public static ODataResponseListGateway GetCollectionGateways(this IGateways operations, string collectionName)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).GetCollectionGatewaysAsync(collectionName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateways for the workspace collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGateway> GetCollectionGatewaysAsync(this IGateways operations, string collectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCollectionGatewaysWithHttpMessagesAsync(collectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateways for the specified workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            public static ODataResponseListGateway GetWorkspaceGateways(this IGateways operations, string collectionName, string workspaceId)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).GetWorkspaceGatewaysAsync(collectionName, workspaceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateways for the specified workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGateway> GetWorkspaceGatewaysAsync(this IGateways operations, string collectionName, string workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkspaceGatewaysWithHttpMessagesAsync(collectionName, workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            public static Gateway GetGatewayById(this IGateways operations, string collectionName, string gatewayId)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).GetGatewayByIdAsync(collectionName, gatewayId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Gateway> GetGatewayByIdAsync(this IGateways operations, string collectionName, string gatewayId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayByIdWithHttpMessagesAsync(collectionName, gatewayId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a gateway by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            public static object DeleteGatewayById(this IGateways operations, string collectionName, string gatewayId)
            {
                return Task.Factory.StartNew(s => ((IGateways)s).DeleteGatewayByIdAsync(collectionName, gatewayId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a gateway by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='gatewayId'>
            /// The gateway id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteGatewayByIdAsync(this IGateways operations, string collectionName, string gatewayId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGatewayByIdWithHttpMessagesAsync(collectionName, gatewayId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
